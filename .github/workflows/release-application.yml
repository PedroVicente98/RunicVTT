name: Build & Release (Windows)

on:
  push:
    tags: ['v*']   # cria release quando você pushar tag vX.Y.Z

permissions:
  contents: write  # necessário para criar release e anexar assets

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
      GENERATOR: Visual Studio 17 2022
      ARCH: x64
      APP_NAME: ${{ github.event.repository.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive   # se você usa submodules

      - name: Add MSBuild to PATH (opcional)
        uses: microsoft/setup-msbuild@v2

      # Configure com o mesmo gerador do seu Visual Studio
      - name: CMake Configure
        run: cmake -S . -B build -G "${{ env.GENERATOR }}" -A ${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: CMake Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      # (Opcional) rode testes se tiver
      # - name: CTest
      #   run: ctest --test-dir build -C ${{ env.BUILD_TYPE }} --output-on-failure

      # Copie DLLs e arquivos necessários para ficar realmente "portable"
      # Ajuste os caminhos conforme seu projeto (ex.: assets, configs, shaders, etc.)
      - name: Prepare portable folder
        shell: pwsh
        run: |
          $binRoot = "build\\${{ env.BUILD_TYPE }}"
          if (!(Test-Path $binRoot)) { $binRoot = "build" } # fallback se não houver subpasta por config
          New-Item -ItemType Directory -Path dist | Out-Null
          $tag  = "${{ github.ref_name }}"
          $out  = "dist\\${{ env.APP_NAME }}-$tag-win64-portable"
          Copy-Item "$binRoot\\*" "$out" -Recurse -Force
          # EXEMPLOS de cópias adicionais (descomente e ajuste):
          # Copy-Item "third_party\\some.dll" "$out" -Force
          # Copy-Item "assets\\*" "$out\\assets" -Recurse -Force
          # Copiar .pdb (se quiser distribuir símbolos):
          # Copy-Item "$binRoot\\*.pdb" "$out" -Force

      - name: ZIP portable
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          Compress-Archive -Path "dist\\${{ env.APP_NAME }}-$tag-win64-portable\\*" -DestinationPath "dist\\${{ env.APP_NAME }}-$tag-win64-portable.zip"

      # ZIP do código-fonte da tag (se quiser além do "Source code" automático do GitHub)
      - name: ZIP source
        shell: bash
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          name="${{ github.event.repository.name }}"
          mkdir -p dist
          git archive --format=zip --output="dist/${name}-${tag}-source.zip" "$tag"

      - name: Upload artifacts (para o job de release)
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-windows

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./to-release

      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Create GitHub Release (auto notes) + upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          gh release create "$TAG" --generate-notes ./to-release/*
