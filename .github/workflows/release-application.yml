name: Build & Package (Windows)

on:
  push:
    tags: ['v*']                 # e.g. v1.2.3
  #workflow_dispatch:
#    inputs:
 #     version:
  #      description: 'Version tag (e.g. v1.2.3)'
  #      required: true
  #      default: 'v0.0.0-dev'
   #   target:
  #      description: 'Git ref to tag on (branch or SHA). Empty = default branch HEAD'
  #      required: false
##        default: ''

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
      GENERATOR: Visual Studio 17 2022
      ARCH: x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Optional: NSIS for .exe installer (CPack still makes ZIP if NSIS missing)
      - name: Install NSIS
        run: choco install nsis -y
        shell: pwsh

      - name: CMake Configure
        run: cmake -S . -B build -G "${{ env.GENERATOR }}" -A ${{ env.ARCH }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: CMake Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Run CPack (ZIP + NSIS)
        shell: pwsh
        run: |
          # Ensure dist/ exists; CPack writes there because CPACK_PACKAGE_DIRECTORY is set in CMakeLists
          New-Item -ItemType Directory -Path dist -ErrorAction SilentlyContinue | Out-Null
          # Run the package target (multi-config generators need --config)
          cmake --build build --config ${{ env.BUILD_TYPE }} --target package
          Write-Host "Produced packages:"
          Get-ChildItem -Recurse -File dist | ForEach-Object { Write-Host " - $($_.FullName)" }

      - name: Upload artifacts (packages)
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-windows
  
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./to-release
  
      - name: Set up GitHub CLI
        uses: actions/setup-gh@v4
  
      - name: Create or update GitHub Release and upload assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          if [ -z "$TAG" ]; then
            TAG="${{ github.event.inputs.version }}"
            TARGET="${{ github.event.inputs.target }}"
            if [ -n "$TARGET" ]; then
              gh release create "$TAG" --target "$TARGET" --generate-notes ./to-release/* \
              || gh release upload "$TAG" ./to-release/* --clobber
            else
              gh release create "$TAG" --generate-notes ./to-release/* \
              || gh release upload "$TAG" ./to-release/* --clobber
            fi
          else
            gh release create "$TAG" --generate-notes ./to-release/* \
            || gh release upload "$TAG" ./to-release/* --clobber
          fi

