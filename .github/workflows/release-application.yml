name: Build & Package (Windows)

on:
  push:
    tags: ['v*']   # e.g. v1.2.3

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
      GENERATOR: Visual Studio 17 2022
      ARCH: x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      # Optional: NSIS for .exe installer (CPack still makes ZIP if NSIS missing)
      - name: Install NSIS
        run: choco install nsis -y
        shell: pwsh
        
      - name: CMake Configure
        run: >
          cmake -S . -B out/build/ -G "${{ env.GENERATOR }}" -A ${{ env.ARCH }}
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        shell: pwsh

      - name: CMake Build (Release)
        run: cmake --build out/build/ --config Release --parallel
        shell: pwsh

      - name: Package (CPack Release)
        run: cmake --build out/build/ --config Release --target package
        shell: pwsh

      - name: Code sign NSIS installer
        if: env.SIGNTOOL != ''
        shell: pwsh
        run: |
          $inst = Get-ChildItem -Path "dist" -Filter "*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($inst) {
            & "${{ env.SIGNTOOL }}" sign `
              /fd SHA256 /tr "http://timestamp.sectigo.com" /td SHA256 `
              /f "${{ env.SIGN_PFX }}" /p "${{ env.SIGN_PWD }}" `
              "$($inst.FullName)"
            Write-Host "Signed installer $($inst.FullName)"
          } else {
            Write-Host "No NSIS installer found (ZIP-only) â€” skipping installer signing."
          }

      - name: Upload artifacts (packages)
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-windows

    steps:
      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: to-release

      - name: Create/Update GitHub Release (auto notes) and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            to-release/*.zip
            to-release/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
